#!/usr/bin/env bash

url_ssh="git@github.com:mietinen/.dotfiles.git"
url_https="https://github.com/mietinen/.dotfiles.git"

_usage() {
    cat <<EOF
optional args:
  ${0} install      Install dotfiles
  ${0} uninstall    Uninstall dotfiles
  ${0} pull         Update using git pull --recurse-submodules
  ${0} sub          Initialize submodules
  ${0} ssh          change git origin to use SSH
  ${0} https        Change git origin to use HTTPS
EOF
}

_install() {
    if command -v stow >/dev/null; then
        _pull --quiet
        for dir in */; do
            stow -nt "$HOME" "$dir" 2>&1 | grep "^\s" | awk 'NF>1{print $NF}' | xargs -I{} rm -f "$HOME/{}"
            stow -t "$HOME" "$dir"
        done
    else
        echo "GNU Stow is not found, files will be copied to \$HOME instead."
        read -rep "Continue with install? [y/N] " install
        [ "$install" = "${install#[Yy]}" ] && return
        _pull --quiet
        for dir in */; do
            cp -rfT "$dir" "$HOME"
            rm -f "$HOME/.git" 2>/dev/null
        done
    fi
}

_uninstall() {
    for dir in */; do
        if command -v stow >/dev/null; then
            stow -Dt "$HOME" "$dir"
        else
            find "$dir" -mindepth 1 ! -type d | while read -r del; do
                rm -f "${del/$dir/$HOME}"
            done
            find "$dir" -mindepth 1 -type d | tac | while read -r del; do
                [ -z "$(ls -A "${del/$dir/$HOME}" 2>/dev/null)" ] && \
                    rm -rf "${del/$dir/$HOME}"
            done
        fi
    done
}

_pull() {
    git pull --recurse-submodules "$@"
}

_sub() {
    for dir in */; do
        # check if submodule and not initialized
        [[ "$(git submodule status "$dir")" != -* ]] && continue
        # ask to initialize
        read -rep "Initialize $dir submodule? [y/N] " install
        [ "$install" = "${install#[Yy]}" ] && continue

        git submodule --quiet update --init "$dir"
        (cd "$dir" && git checkout -q master)
    done
}

_set_ssh() {
    git remote set-url origin "$url_ssh"
    git submodule sync --recursive
    echo "Changed git remote to: $url_ssh"
}

_set_https() {
    git remote set-url origin "$url_https"
    git submodule sync --recursive
    echo "Changed git remote to: $url_https"
}

case "$1" in
    install)    _install ;;
    uninstall)  _uninstall ;;
    pull)       _pull ;;
    sub)        _sub ;;
    ssh)        _set_ssh ;;
    https)      _set_https ;;
    *)          _usage ;;
esac
